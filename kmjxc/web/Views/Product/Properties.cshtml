@{    
    ViewBag.Title = "产品属性管理";
    List<KM.JXC.BL.Models.BProperty> properties = (List<KM.JXC.BL.Models.BProperty>)ViewData["mproperty"];
}

<script>
    var cateMgr = new KMJXCProductManager();
    var valueRows = 0;
    $(document).ready(function () {

        cateMgr.GetCategories({ 'parent_id': 0 }, function (res) {
            var $pcate = $("#pop_batch_edit_category").find("#batch_pCategory");
            if ($(res.data).size() > 0) {
                $(res.data).each(function (index, item) {
                    $("<option value=\"" + item.ID + "\">" + item.Name + "</option>").appendTo($pcate);
                });
            }
        });

        $("#pop_batch_edit_category").find("#batch_pCategory").change(function () {
            var $ccate = $("#pop_batch_edit_category").find("#batch_cCategory");
            var pcid = $(this).val();
            if (pcid > 0) {
                cateMgr.GetCategories({ 'parent_id': pcid }, function (res) {
                    $ccate.empty();
                    if ($(res.data).size() > 0) {

                        $("<option value=\"0\">--选择--</option>").appendTo($ccate);
                        $(res.data).each(function (index, item) {
                            $("<option value=\"" + item.ID + "\">" + item.Name + "</option>").appendTo($ccate);
                        });
                        $ccate.show();
                    } else {
                        $ccate.hide();
                    }
                });
            } else {
                $ccate.empty();
                $ccate.hide();
            }
        });

        valueRows = $('#propValueList li').size();

        var obj = { width: 859, height: 600, title: "属性列表", flexHeight: true, sortable: false, selectionModel: { mode: 'range' } };
        obj.colModel = [{ title: "编号", width: 50, dataType: "integer", dataIndx: "ID", editable: false },
                        {
                            title: "店铺", width: 150, dataType: "string", dataIndx: "Shop.Title", editable: false

                        },

                         {
                             title: "主店铺", width: 70, dataType: "string", dataIndx: "Shop.Title", editable: false,
                             render: function (ui) {
                                 if (ui.rowData["FromMainShop"] == true) {
                                     return "是";
                                 } else {
                                     return "否";
                                 }
                             }

                         },
                        { title: "属性名称", width: 80, dataType: "string", dataIndx: "Name", editable: false },
                        { title: "类目名称", width: 100, dataType: "string", dataIndx: "Category.Name", editable: false },
                       
                        { title: "创建者", width: 200, dataType: "string", dataIndx: "Created_By.Name", editable: false },
                        { title: "创建日期", width: 200, dataType: "timestamp", dataIndx: "Created", editable: false },
        ];
        
        obj.dataModel = {
            location: "remote",
            sorting: "remote",
            //paging: "remote",
            dataType: "JSON",
            method: "POST",
            //curPage: 1,
            //rPP: 20,
            sortIndx: 2,
            sortDir: "up",
            //rPPOptions: [1, 10, 20, 30, 40, 50, 100, 500, 1000],
            getUrl: function (prgrid) {
                var sortDir = (this.sortDir == "up") ? "asc" : "desc";
                var sort = ['ID', 'Name', "Category.Name", "Created_By.Name", "Created"];               
                return {
                    url: "/api/Categories/GetPropertiesT", data: "cid=0&sortBy=" + sort[this.sortIndx] + "&dir=" + sortDir
                };
            },
            getData: function (dataJSON) {
                //alert(dataJSON.totalRecords);
                return { curPage: dataJSON.curPage, totalRecords: dataJSON.totalRecords, data: dataJSON.data };
            }
        };

        obj.cellSave = function (event, ui) {

        }

        $("#propertyTable").on("pqgridrender", function (evt, obj) {
            var $toolbar = $("<div class='pq-grid-toolbar pq-grid-toolbar-crud'></div>").appendTo($(".pq-grid-top", this));

            $("<span>添加</span>").appendTo($toolbar).button({ icons: { primary: "ui-icon-plus" } }).click(function (evt) {
                addRow();
            });
            $("<span>查看/修改</span>").appendTo($toolbar).button({ icons: { primary: "ui-icon-pencil" } }).click(function (evt) {
                editRow();
            });

            $("<span>批量修改类目</span>").appendTo($toolbar).button({ icons: { primary: "ui-icon-pencil" } }).click(function (evt) {
                BatchEditCategories();
            });
            //$("<span>删除</span>").appendTo($toolbar).button({ icons: { primary: "ui-icon-circle-minus" } }).click(function () {
            //    deleteRow();
            //});
            $toolbar.disableSelection();
        });

        var $grid = $("#propertyTable").pqGrid(obj);
        $("#popup-dialog-crud").dialog({
            width: 400, modal: true,
            open: function () { $(".ui-dialog").position({ of: "#grid_crud" }); },
            autoOpen: false
        });
        $grid.on("pqgridcelleditkeydown", function (evt, ui) {
            //debugger;

            var keyCode = evt.keyCode,
                rowIndxPage = ui.rowIndxPage,
                colIndx = ui.colIndx;

            if (keyCode == 40 || keyCode == 38) {
                $grid.pqGrid("saveEditCell");
            }

            if (keyCode == 40) {
                if (rowIndxPage >= data.length - 1) {
                    //var dt = $grid.pqGrid("getEditCellData");
                    var dt = ui.$cell.text();
                    if (dt.length > 0) {
                        //alert(dt);
                        var row = ["", "", "", ""];
                        data.push(row);
                        $grid.pqGrid("refreshDataAndView");
                    }
                }
                if (rowIndxPage < data.length - 1) {
                    //debugger;
                    rowIndxPage++;
                    $grid.pqGrid("setSelection", null);
                    $grid.pqGrid("setSelection", { rowIndx: rowIndxPage });
                    $grid.pqGrid("editCell", { rowIndxPage: rowIndxPage, colIndx: colIndx });
                    evt.preventDefault();
                    return false;
                }
            }
            else if (keyCode == 38 && rowIndxPage > 0) {
                rowIndxPage--;
                $grid.pqGrid("setSelection", null);
                $grid.pqGrid("setSelection", { rowIndx: rowIndxPage });

                $grid.pqGrid("editCell", { rowIndxPage: rowIndxPage, colIndx: colIndx });
                evt.preventDefault();
                return false;
            }
        });

        function addRow() {
            //debugger;
            var DM = $grid.pqGrid("option", "dataModel");
            var data = DM.data;

            var $frm = $("form#crud-form");
            $frm.find("input").val("");

            $("#popup-dialog-crud").dialog({
                open: function (event, ui) {
                    $('#resultmessage').html("");
                    $('#resultmessage').hide();
                    CleanForm();
                    $('#edittitle').hide();
                    $('#prop_id').val("");
                    $('#pCategory').removeAttr("disabled");
                    $('#cCategory').removeAttr("disabled");
                    $('#propName').removeAttr("readonly");
                },
                resizable: false,
                title: "添加属性", buttons: {
                    "保存": function () {
                        var that = this;
                        var pcid = $('#pCategory').val();
                        var cid = $('#cCategory').val(); 
                        var propName = $('#propName').val();
                       
                        if ($.trim(propName) == '') {
                            $('#resultmessage').html("名称不能为空");
                            $('#resultmessage').show();
                        }

                        if (!verifyvalues()) {
                            return;
                        }

                        var categoryId = pcid;
                        if (cid > 0) {
                            categoryId = cid;
                        }

                        var propValue = getpropValues();                       

                        cateMgr.CreateProperty({ 'category_id': categoryId, 'prop_name': propName, 'prop_value': propValue }, function (res) {
                            if (res.Status == 'ok') {
                                $grid.pqGrid("refreshDataAndView");
                                $(that).dialog("close");
                            } else {
                                $('#resultmessage').html(res.Message);
                                $('#resultmessage').show();
                            }
                        });                        
                    },
                    "取消": function () {
                        $(this).dialog("close");
                    }
                }
            });
           
            $("#popup-dialog-crud").dialog("open");
        }
        //delete Row.
        function deleteRow() {
            var rowIndx = getRowIndx();
            if (rowIndx != null) {
                var DM = $grid.pqGrid("option", "dataModel");
                DM.data.splice(rowIndx, 1);
                $grid.pqGrid("refreshDataAndView");
                $grid.pqGrid("setSelection", { rowIndx: rowIndx });
            }
        }

        function checkduplicatedvalue(value, parentId) {
            var found = false;
            for (var i = 1; i <= valueRows; i++) {
                var pValue = $('#val' + i).find("input[type='text']").val();
               
                if ($.trim(pValue) != '' && parentId!=("val"+i)) {
                    if (pValue == value) {
                        found = true;
                        break;
                    }
                }
            }

            return found;
        }

        function verifyvalues() {
            var re = /\\|\$|\<|\&|\>|\'|\?|\;|\,|\/|\"/;
            $('#resultmessage').html("");
            $('#resultmessage').hide();
            for (var i = 1; i <= valueRows; i++) {
                var pValue = $('#val' + i).find("input[type='text']").val();
                if ($.trim(pValue) != '') {                    
                    if ($('#val' + i).find("input[type='text']").attr("readonly") != "readonly") {
                        if (re.test(pValue)) {

                            $('#resultmessage').html("属性值不能包含以下字符 $ < & > \'\" ? \ ; , \/");
                            $('#resultmessage').show();                            
                            return false;
                        }
                    }
                }
            }

            return true;
        }

        function getpropValues() {
            var propValue = "";          
            for (var i = 1; i <= valueRows; i++) {
                var pValue = $('#val' + i).find("input[type='text']").val();
                if ($.trim(pValue) != '') {                    
                    if ($('#val' + i).find("input[type='text']").attr("readonly") != "readonly") {                        
                        if (propValue == "") {
                            propValue = pValue;
                        } else {
                            propValue = propValue + "," + pValue;
                        }
                    } 
                }
            }

            return propValue;
        }

        $('#propValueList').delegate("input[type='text']","blur", function () {
           
            var value = $(this).val();
            var id = $(this).parent("li").attr("id");
            //alert(id);
            if (checkduplicatedvalue(value, id)) {
                $(this).val("");
                var error = $('#resultmessage').html();
                if (error != "") {
                    error = error + "<br/>属性值：" + value + " 已经存在";
                } else {
                    error = "属性值：" + value + " 已经存在";
                }
                $('#resultmessage').html("属性值：" + value + " 已经存在");
                $('#resultmessage').show();
            } else {
                $('#resultmessage').html("");
                $('#resultmessage').hide();
            }
        });

        function editRow() {
            var rows = getRowIndx();
            if (rows != null) {

                if (rows.length > 1) {
                    alert("只能选择一行属性进行修改");
                    return;
                }

                var DM = $grid.pqGrid("option", "dataModel");
                var data = DM.data;
                var row = data[rows[0]];
                var $frm = $("form#crud-form");
                var pId = row["ID"];
                var pName = row["Name"];

                $("#popup-dialog-crud").dialog({
                    open: function (event, ui) {

                        $('#resultmessage').html("");
                        $('#resultmessage').hide();
                        CleanForm();
                        $('#edittitle').show();
                        $('#prop_id').val(pId);
                        cateMgr.GetProperty({ 'prop_id': pId }, function (res) {
                            if (res != null && res != 'undefined' && typeof (res) == 'object') {
                                $('#propName').val(pName);
                                $('#propName').attr("readonly", "readonly");
                                if (res.Values != null && typeof (res.Values) == 'object' && res.Values.length > 0) {
                                    $(res.Values).each(function (index, item) {
                                        if (index + 1 > 5) {                                           
                                            $('#val' + (index)).find("span[id='remove" + index + "']").remove();
                                            AddValueRow();
                                        }
                                        //alert(item.Name);
                                        $('#val' + (index + 1)).find("input[type='text']").val(item.Name).attr("readonly", "readonly");
                                        $('#val' + (index+1)).find("span[id='remove" + (index+1) + "']").remove();
                                    });

                                    $('#pCategory').attr("disabled", "disabled");
                                    $('#cCategory').attr("disabled", "disabled");
                                    if (res.Category != null && res.Category != 'null') {
                                        if (res.Category.Parent_ID <= 0) {
                                            $('#pCategory').val(res.Category.Product_Class_ID);
                                        } else {
                                            $('#pCategory').val(res.Category.Parent_ID);
                                            cateMgr.CategoryChange(document.getElementById('pCategory'), 'cCategory');
                                            $('#cCategory').val(res.Category.Product_Class_ID);
                                        }
                                    }

                                   
                                }
                            }
                        });                       
                    },
                    resizable: false,
                    title: "编辑属性 (" + pName + ")", buttons: {
                        "保存": function () {                            
                            var that = this;
                            if (!verifyvalues()) {
                                return;
                            }

                            var values = getpropValues();
                           
                            cateMgr.AddNewPropValue({ prop_id: pId, prop_values: values }, function (res) {
                                if (res.Status == 'ok') {
                                    $grid.pqGrid("refreshDataAndView");
                                    $(that).dialog("close");
                                }
                            });
                        },
                        "取消": function () {
                            $(this).dialog("close");
                        }
                    }
                }).dialog("open");
            }
        }

        function BatchEditCategories() {
            var rows = getRowIndx();

            if (rows==null) {
                alert("请至少选择一行属性进行批量类目修改");
                return;
            }

            var $ui = $("#pop_batch_properties_list");
            $ui.html("");
            var DM = $grid.pqGrid("option", "dataModel");
            var data = DM.data;
            for (var i = 0; i < rows.length; i++) {
                var $li = $("<li></li>").appendTo($ui);               
                $("<span value=\"" + data[rows[i]]["ID"] + "\" style=\"display:inline-block;padding-rigth:10px;\">" + data[rows[i]]["Name"] + "</span>").appendTo($li);
            }

            $ui.show();

            var $pcate = $("#batch_pCategory");
            var $ccate = $("#batch_cCategory");          
            $pcate.val("0");
            $ccate.empty().hide();

            $("#pop_batch_edit_category").dialog({
                width: 500,
                modal: true,
                open: function (event, ui) {

                },
                close: function (event, ui) {

                },
                resizable: false,
                title: "批量修改类目",
                buttons: [
                   {
                       text: "保存", click: function () {
                           var that = this;
                           var category = 0;
                           var pid = $('#batch_pCategory').val();
                           var cid = $('#batch_cCategory').val();
                           if (pid == 0) {
                               alert("请选择类目");
                               return;
                           }

                           category = pid;
                           if (cid > 0) {
                               category = cid;
                           }

                           var props = "";

                           $(that).find("#pop_batch_properties_list").find("li").each(function (i, li) {
                               if (props == "") {
                                   props = $(li).find("span").attr("value");
                               } else {
                                   props += "," + $(li).find("span").attr("value");
                               }
                           });
                          
                           ShowProgress('page_loading', function () { }, "正在批量更新属性类目，请不要关闭浏览器，请等待...");
                           cateMgr.BatchUpdatePropertiesCategory({ category_id: category, props: props }, function (res) {
                               Boxy.get($('#page_loading')).hide();
                               if (res.Status == "ok") {                                  
                                   $(that).dialog("close");
                                   $grid.pqGrid("refreshDataAndView");
                               } else {
                                   alert(res.Message);
                               }
                           });
                           
                       },
                       icons: { primary: "ui-icon-disk" }
                   },
                   {
                       text: "取消", click: function () {
                           $(this).dialog("close");
                       },
                       icons: { primary: "ui-icon-close" }
                   }
                ]
            });

            $("#pop_batch_edit_category").dialog("open");
        }

        function getRowIndx() {
            var rows = [];
            var arr = $grid.pqGrid("selection", { type: 'row', method: 'getSelection' });
            var curPage = $grid.pqGrid("option", "dataModel.curPage");
            var pageSize = $grid.pqGrid("option", "dataModel.rPP");
            if (arr && arr.length > 0) {
                for (var i = 0; i < arr.length; i++) {
                    var rowIndx = arr[i].rowIndxPage;
                    rows.push(rowIndx);
                }
                return rows;
            }

            return null;
        }

        $('#pCategory').change(function () {
            //alert($(this).attr('id'));
            cateMgr.CategoryChange(this, 'cCategory')
        });
    });

    function CleanForm() {
       
        var needremove = [];
        for (var i = 1; i <= valueRows; i++) {
            //alert($('#val' + i).find("input[type='text']").val());
            $('#val' + i).find("input[type='text']").removeAttr("readonly").val("");
            if (i > 5) {
                needremove.push(i);
            }
        }

        while (needremove.length > 0) {
            $('#val' + needremove.pop()).remove();
        }

        $('#propName').val("");
        //alert($('#propName').val());
        $('#pCategory').val(0);
        $('#cCategory').empty();
        $('#cCategory').hide();
        valueRows = $('#propValueList li').size();
    }

    function AddValueRow() {
        valueRows++;
        $('#propValueList').append("<li id=\"val" + valueRows + "\"><input class=\"W_input\" type=\"text\" value=\"\"/><span id=\"add" + valueRows + "\" class=\"simg\"><img onclick=\"AddValueRow()\" src=\"/Content/images/add.png\"/></span><span id=\"remove" + valueRows + "\" class=\"simg\"><img onclick=\"RemoveValueRow('val" + valueRows + "')\" src=\"/Content/images/remove.gif\"/></span></li>")
    }

    function RemoveValueRow(id) {
        $('#propValueList').find('#' + id).remove();
        valueRows--;
    }
</script>
<div class="normallist"> 
<div id="propertyTable"></div> 
<div id="popup-dialog-crud" style="width: auto; min-height: 48px; height: auto;" class="ui-dialog-content ui-widget-content" scrolltop="0" scrollleft="0">
<form>
 <input type="hidden" value="" id="prop_id"/>
 <div class="" style="padding-top:30px;">
    <div id="edittitle" class="row nolabel2" style="display:none;color:red;">编辑属性时只能添加新属性值，不能修改原有数据</div>
    <div class="row">
        <label>类目:</label><select class="W_input sel1" id="pCategory">
             <option value="0">--选择--</option>
                @if (ViewData["category"] != null)
                {
                    foreach (var cate in ViewData["category"] as List<KM.JXC.BL.Models.BCategory>)
                    { 
                        <option value="@cate.ID">@cate.Name</option>
                    }
                }
        </select> <select class="W_input sel1" id="cCategory" style="display:none;"></select>
    </div>
   
    <div class="row"><label>名称:</label><input class="W_input" value="" id="propName"/></div>
    <div class="row" style="height:auto">
        <label style="display:inline-block;float:left;">属性值:</label>
        <ul class="row normalul" style="height:auto" id="propValueList">
            <li  id="val1"><input class="W_input" type="text" value=""/></li>
            <li  id="val2"><input class="W_input" type="text" value=""/></li>
            <li  id="val3"><input class="W_input" type="text" value=""/></li>
            <li  id="val4"><input class="W_input" type="text" value=""/></li>
            <li  id="val5"><input class="W_input" type="text" value=""/><span class="simg"><img src="/Content/images/add.png" onclick="AddValueRow()" /></span></li>
        </ul>

    </div>
    <div id="resultmessage" class="message1 nolabel2" style="height:auto;display:none;">
           
    </div>
   @* <div class="row" style="height:auto;padding-left:60px;">
         <input class="W_input_btn btn1"  id="btnAddProperty" type="button" value="添加"/>
    </div>*@
  </div>
</form>
</div>

<div id="pop_batch_edit_category" style="display:none;">
     <ul class="row" id="pop_batch_properties_list" style="height:auto;display:none;"></ul>
     <div class="row">
            <label for="pCategory">类目:</label><select class="W_input" style="height:24px;" id="batch_pCategory">
                <option value="0">--选择--</option>                  
                </select>
                <select class="W_input" style="height:24px;display:none;" id="batch_cCategory">

                </select>
        </div>
</div>
</div>

